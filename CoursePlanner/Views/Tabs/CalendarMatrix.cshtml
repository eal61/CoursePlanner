@using CoursePlanner.Models
@using CoursePlanner.Controllers;
@using App.Extensions;
@model DegreeProgram
@{
    //var studentId = // get studentId from session
    ViewBag.Title = "Calendar";
    // var studentID = User.Identity.GetStudentId(); -- this is just a test. use where you would please!
    StudentController studentData = new StudentController();
    CoursePlan plan = studentData.getCoursePlan(User.Identity.GetStudentId());
    // now you have the students information
    // strip out the semesters
    var sem1 = plan.Semesters.Where(s => s.Code == 1).First().Courses;
    var sem2 = plan.Semesters.Where(s => s.Code == 2).First().Courses;
    var sem3 = plan.Semesters.Where(s => s.Code == 3).First().Courses;
    var sem4 = plan.Semesters.Where(s => s.Code == 4).First().Courses;
    var sem5 = plan.Semesters.Where(s => s.Code == 5).First().Courses;
    var sem6 = plan.Semesters.Where(s => s.Code == 6).First().Courses;
    var sem7 = plan.Semesters.Where(s => s.Code == 7).First().Courses;
    var sem8 = plan.Semesters.Where(s => s.Code == 8).First().Courses;
}
@{
    var name = "";
    var old = "";
    var sem = 0;
    var del = 0;
    var status = 0;
    if (IsPost)
    {
        del = Int32.Parse(Request.Form["delete1"]);

        if (del == 0)
        {
            name = Request.Form["class"];
            sem = Int32.Parse(Request.Form["semNo"]);
            status = studentData.addCourse(User.Identity.GetStudentId(), name, sem);
            if (status == -1)
            {
                Response.Write("<script>alert('Error: Invalid Course Number.');</script>");
            }
            else
            {
                Response.Redirect(Request.RawUrl);
            }
        }
        else if (del == 2)
        {
            name = Request.Form["degree"];
            status = studentData.addMajor(User.Identity.GetStudentId(), name);
            if (status == -1)
            {
                Response.Write("<script>alert('Error: Invalid Degree Name or DEPT.');</script>");
            }
            else
            {
                //Response.Redirect(Request.RawUrl);
            }
        }
        else if (del == 3)
        {
            name = Request.Form["degree"];
            status = studentData.addMinor(User.Identity.GetStudentId(), name);
            if (status == -1)
            {
                Response.Write("<script>alert('Error: Invalid Degree Name or DEPT.');</script>");
            }
            else
            {
                //Response.Redirect(Request.RawUrl);
            }
        }
        else if (del == 4)
        {
            name = Request.Form["degree"];
            studentData.removeMajor(User.Identity.GetStudentId(), name);
            //Response.Redirect(Request.RawUrl);

        }
        else if (del == 5)
        {
            name = Request.Form["degree"];
            studentData.removeMinor(User.Identity.GetStudentId(), name);
            //Response.Redirect(Request.RawUrl);

        }
        else if (del == 6)
        {
            name = Request.Form["degree"];
            old = Request.Form["oldDegree"];
            status = studentData.changeMajor(User.Identity.GetStudentId(), name, old);
            if (status == -1)
            {
                Response.Write("<script>alert('Error: Major not changed: Invalid Degree Name or DEPT.');</script>");
            }
            else
            {
                //Response.Redirect(Request.RawUrl);
            }

        }
        else if (del==7)
        {
            name = Request.Form["degree"];
            old = Request.Form["oldDegree"];
            status = studentData.changeMinor(User.Identity.GetStudentId(), name, old);

            if (status == -1)
            {
                Response.Write("<script>alert('Error: Minor not changed: Invalid Degree Name or DEPT.');</script>");
            }
            else
            {
                //Response.Redirect(Request.RawUrl);
            }
        }
        else //del==1
        {
            name = Request.Form["class"];
            sem = Int32.Parse(Request.Form["semNo"]);
            studentData.removeCourse(User.Identity.GetStudentId(), name, sem);
            //Response.Redirect(Request.RawUrl);
        }
    }

}
<!doctype html>
<html>
<head>
    <script type='text/javascript' src='~/Scripts/knockout-3.4.2.js'></script>
    <script type='text/javascript' src='~/Scripts/knockout.validation.js'></script>
    <!--<script type='text/javascript' src='~/Scripts/require.js'></script>-->
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <title>Muuri Table</title>
    <link rel="stylesheet" href="~/Content/StyleSheet1.css">

    <!-- WIDGETS -->
    <script>
        ko.components.register('class-widget', {
            viewModel: function (params) {
                // Data: value is either null, 'like', or 'dislike'
                this.deptCode = ko.observable(params.deptCode);
                // Behaviors
                this.addClass = function () {
                    // create pop up to add a course
                }.bind(this);
            },
            template: '<div class="class-widget">\
                        <div data-bind="visible: !deptCode()">\
                            <button data-bind="click: addClass">Click me</button>\
                        </div>\
                        <div>\
                            <strong data-bind="text: deptCode"></strong>\
                        </div>\
                       </div>' 
        });
    </script>

    <!-- HELPER FUNCTIONS -->
    <script>
        function saveOrderedItems() {
            var list = getGridItemsOrdered();
            var jsonList = JSON.stringify(list);
            var t = "test";
            var targetUrl = "http://localhost:50618/api/courseplan";
            $.ajax({
                type: "POST",
                url: targetUrl,
                data: jsonList,
                contentType: "application/json; charset=utf-8",
                dataType: "json"
            });
        }

        function getGridItemsOrdered()
        {
            var studentId = @User.Identity.GetStudentId();

            var sem1 = document.getElementById("sem1");
            var sem2 = document.getElementById("sem2");
            var sem3 = document.getElementById("sem3");
            var sem4 = document.getElementById("sem4");
            var sem5 = document.getElementById("sem5");
            var sem6 = document.getElementById("sem6");
            var sem7 = document.getElementById("sem7");
            var sem8 = document.getElementById("sem8");

            // get board items from semester
            var s1 = sem1.getElementsByClassName("board-item");
            var s2 = sem2.getElementsByClassName("board-item");
            var s3 = sem3.getElementsByClassName("board-item");
            var s4 = sem4.getElementsByClassName("board-item");
            var s5 = sem5.getElementsByClassName("board-item");
            var s6 = sem6.getElementsByClassName("board-item");
            var s7 = sem7.getElementsByClassName("board-item");
            var s8 = sem8.getElementsByClassName("board-item");

            // create arrays for class ids
            var s1_ids = new Array();
            var s2_ids = new Array();
            var s3_ids = new Array();
            var s4_ids = new Array();
            var s5_ids = new Array();
            var s6_ids = new Array();
            var s7_ids = new Array();
            var s8_ids = new Array();

            // sem1
            for (var i = 0; i < s1.length; i++) {
                s1_ids.push(
                    {
                        "semesterId": 1,
                        "courseId": parseInt(s1[i].id),
                        "studentId": studentId
                    }
                );
            }

            // sem2
            for (var i = 0; i < s2.length; i++) {
                s2_ids.push(
                    {
                        "semesterId": 2,
                        "courseId": parseInt(s2[i].id),
                        "studentId": studentId
                    }
                );
            }

            // sem3
            for (var i = 0; i < s3.length; i++) {
                s3_ids.push(
                    {
                        "semesterId": 3,
                        "courseId": parseInt(s3[i].id),
                        "studentId": studentId
                    }
                );
            }

            // sem4
            for (var i = 0; i < s4.length; i++) {
                s4_ids.push(
                    {
                        "semesterId": 4,
                        "courseId": parseInt(s4[i].id),
                        "studentId": studentId
                    }
                );
            }

            // sem5
            for (var i = 0; i < s5.length; i++) {
                s5_ids.push(
                    {
                        "semesterId": 5,
                        "courseId": parseInt(s5[i].id),
                        "studentId": studentId
                    }
                );
            }

            // sem6
            for (var i = 0; i < s6.length; i++) {
                s6_ids.push(
                    {
                        "semesterId": 6,
                        "courseId": parseInt(s6[i].id),
                        "studentId": studentId
                    }
                );
            }

            // sem7
            for (var i = 0; i < s7.length; i++) {
                s7_ids.push(
                    {
                        "semesterId": 7,
                        "courseId": parseInt(s7[i].id),
                        "studentId": studentId
                    }
                );
            }

            // sem8
            for (var i = 0; i < s8.length; i++) {
                s8_ids.push(
                    {
                        "semesterId": 8,
                        "courseId": parseInt(s8[i].id),
                        "studentId": studentId
                    }
                );
            }
            var coursePlan = s1_ids.concat(s2_ids, s3_ids, s4_ids, s5_ids, s6_ids, s7_ids, s8_ids);
            let filteredPlan = coursePlan.filter(course => !isNaN(course.courseId));

            return filteredPlan;
        }

        
        function addClassButton(sem) {
            var newClass = prompt("Please enter new class in DEPT#### format");
            if (newClass == null || newClass == "") {
                //do nothing
            }
            else {
                post('/', { class: newClass, semNo: sem, delete1: "0" });
            }
        }

        function removeClassButton(className, sem) {
            post('/', { class: className, semNo: sem, delete1: "1" });    
        }

       
        function post(path, params, method) {
            method = method || "post"; // Set method to post by default if not specified.

            // The rest of this code assumes you are not using a library.
            // It can be made less wordy if you use one.
            var form = document.createElement("form");
            form.setAttribute("method", method);
            form.setAttribute("action", path);

            for (var key in params) {
                if (params.hasOwnProperty(key)) {
                    var hiddenField = document.createElement("input");
                    hiddenField.setAttribute("type", "hidden");
                    hiddenField.setAttribute("name", key);
                    hiddenField.setAttribute("value", params[key]);

                    form.appendChild(hiddenField);
                }
            }

            document.body.appendChild(form);
            form.submit();
        }

        function delete1(path, params, method) {
            method = method || "delete"; // Set method to post by default if not specified.

            // The rest of this code assumes you are not using a library.
            // It can be made less wordy if you use one.
            var form = document.createElement("form");
            form.setAttribute("method", method);
            form.setAttribute("action", path);

            for (var key in params) {
                if (params.hasOwnProperty(key)) {
                    var hiddenField = document.createElement("input");
                    hiddenField.setAttribute("type", "hidden");
                    hiddenField.setAttribute("name", key);
                    hiddenField.setAttribute("value", params[key]);

                    form.appendChild(hiddenField);
                }
            }

            document.body.appendChild(form);
            form.submit();
        }
    </script>

</head>
<body>
    <!-- need to update the list at hand when items are moved around -->
    <!-- save the order to the student object, maybe have an update button to update db?-->
    <div class="board">

        <div id="sem1" class="board-column">
            <div class="board-column-header">Semester 1</div>
            <div class="board-column-content">
                @{var i = 0;
                foreach (var course in sem1)
                {
                    i++;
                    <div class="board-item" id=@course.Id>
                        <div class="board-item-content">
                            <div data-bind="component: { name: 'class-widget', params: { deptCode: '@course.DeptCode' }}"></div> @*TODO I would change course.Id to course.DeptCode*@
                            <button class="button" onclick="removeClassButton('@course.DeptCode',1)">Remove Class</button>
                        </div>
                    </div>
            }
            for (; i < 6; i++)
            {
                <div class="board-item" >
                    <div class="board-item-content">
                        Add a Class
                        <button class="button" onclick="addClassButton(1)">+</button>
                    </div>

                </div>
        }}
            </div>
        </div>

        <div id="sem2" class="board-column">
            <div class="board-column-header">Semester 2</div>
            <div class="board-column-content">
                @{i = 0;
                foreach (var course in sem2)
                {
                    i++;
                    <div class="board-item" id=@course.Id>
                        <div class="board-item-content">
                            <div data-bind="component: { name: 'class-widget', params: { deptCode: '@course.DeptCode' }}"></div>

                            @*<button class="button" onclick="editClassButton()">Edit Class</button>*@



                            <button class="button" onclick="removeClassButton('@course.DeptCode',2)">Remove Class</button>
                        </div>
                    </div>
            }
            for (; i < 6; i++)
            {
                <div class="board-item">
                    <div class="board-item-content">
                        Add a Class
                        <button class="button" onclick="addClassButton(2)">+</button>
                    </div>

                </div>
        }}
            </div>
        </div>

        <div id="sem3" class="board-column">
            <div class="board-column-header">Semester 3</div>
            <div class="board-column-content">
                @{i = 0;
                foreach (var course in sem3)
                {
                    i++;
                    <div class="board-item" id=@course.Id>
                        <div class="board-item-content">
                            <div data-bind="component: { name: 'class-widget', params: { deptCode: '@course.DeptCode' }}"></div>

                            @*<button class="button" onclick="editClassButton()">Edit Class</button>*@



                            <button class="button" onclick="removeClassButton('@course.DeptCode',3)">Remove Class</button>
                        </div>
                    </div>
            }
            for (; i < 6; i++)
            {
                <div class="board-item">
                    <div class="board-item-content">
                        Add a Class
                        <button class="button" onclick="addClassButton(3)">+</button>
                    </div>

                </div>
        }}
            </div>
        </div>

        <div id="sem4" class="board-column">
            <div class="board-column-header">Semester 4</div>
            <div class="board-column-content">
                @{i = 0;
                foreach (var course in sem4)
                {
                    i++;
                    <div class="board-item" id=@course.Id>
                        <div class="board-item-content">
                            <div data-bind="component: { name: 'class-widget', params: { deptCode: '@course.DeptCode' }}"></div>

                            @*<button class="button" onclick="editClassButton()">Edit Class</button>*@



                            <button class="button" onclick="removeClassButton('@course.DeptCode',4)">Remove Class</button>
                        </div>
                    </div>
            }
            for (; i < 6; i++)
            {
                <div class="board-item">
                    <div class="board-item-content">
                        Add a Class
                        <button class="button" onclick="addClassButton(4)">+</button>
                    </div>

                </div>
        }}
            </div>
        </div>

        <div id="sem5" class="board-column">
            <div class="board-column-header">Semester 5</div>
            <div class="board-column-content">
                @{i = 0;
                foreach (var course in sem5)
                {
                    i++;
                    <div class="board-item" id=@course.Id>
                        <div class="board-item-content">
                            <div data-bind="component: { name: 'class-widget', params: { deptCode: '@course.DeptCode' }}"></div>

                            @*<button class="button" onclick="editClassButton()">Edit Class</button>*@



                            <button class="button" onclick="removeClassButton('@course.DeptCode',5)">Remove Class</button>
                        </div>
                    </div>
            }
            for (; i < 6; i++)
            {
                <div class="board-item">
                    <div class="board-item-content">
                        Add a Class
                        <button class="button" onclick="addClassButton(5)">+</button>
                    </div>

                </div>
        }}
            </div>
        </div>

        <div id="sem6" class="board-column">
            <div class="board-column-header">Semester 6</div>
            <div class="board-column-content">
                @{i = 0;
                foreach (var course in sem6)
                {
                    i++;
                    <div class="board-item" id=@course.Id>
                        <div class="board-item-content">
                            <div data-bind="component: { name: 'class-widget', params: { deptCode: '@course.DeptCode' }}"></div>

                            @*<button class="button" onclick="editClassButton()">Edit Class</button>*@



                            <button class="button" onclick="removeClassButton('@course.DeptCode',6)">Remove Class</button>
                        </div>
                    </div>
            }
            for (; i < 6; i++)
            {
                <div class="board-item">
                    <div class="board-item-content">
                        Add a Class
                        <button class="button" onclick="addClassButton(6)">+</button>
                    </div>

                </div>
        }}
            </div>
        </div>

        <div id="sem7" class="board-column">
            <div class="board-column-header">Semester 7</div>
            <div class="board-column-content">
                @{i = 0;
                foreach (var course in sem7)
                {
                    i++;
                    <div class="board-item" id=@course.Id>
                        <div class="board-item-content">
                            <div data-bind="component: { name: 'class-widget', params: { deptCode: '@course.DeptCode' }}"></div>

                            @*<button class="button" onclick="editClassButton()">Edit Class</button>*@



                            <button class="button" onclick="removeClassButton('@course.DeptCode',7)">Remove Class</button>
                        </div>
                    </div>
            }
            for (; i < 6; i++)
            {
                <div class="board-item">
                    <div class="board-item-content">
                        Add a Class
                        <button class="button" onclick="addClassButton(7)">+</button>
                    </div>

                </div>
        }}
            </div>
        </div>

        <div id="sem8" class="board-column">
            <div class="board-column-header">Semester 8</div>
            <div class="board-column-content">
                @{i = 0;
                foreach (var course in sem8)
                {
                    i++;
                    <div class="board-item" id=@course.Id>
                        <div class="board-item-content">
                            <div data-bind="component: { name: 'class-widget', params: { deptCode: '@course.DeptCode' }}"></div>

                            @*<button class="button" onclick="editClassButton()">Edit Class</button>*@
                            


                            <button class="button" onclick="removeClassButton('@course.DeptCode',8)">Remove Class</button>
                        </div>
                    </div>
            }
            for (; i < 6; i++)
            {
                <div class="board-item">
                    <div class="board-item-content">
                        Add a Class
                        <button class="button" onclick="addClassButton(8)">+</button>
                    </div>

                </div>
        }}
            </div>
        </div>





    </div>

   

    <script src="https://cdnjs.cloudflare.com/ajax/libs/web-animations/2.3.1/web-animations.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/hammer.js/2.0.8/hammer.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/muuri/0.5.3/muuri.min.js"></script>
    <script>
        // LEAVE THIS FOR MUURI CODE ONLY PLEASE

        var itemContainers = [].slice.call(document.querySelectorAll('.board-column-content'));
        var columnGrids = [];
        var boardGrid;

        // Define the column grids so we can drag those
        // items around.
        itemContainers.forEach(function (container) {

            // Instantiate column grid.
            var grid = new Muuri(container, {
                items: '*',
                layoutDuration: 400,
                layoutEasing: 'ease',
                dragEnabled: true,
                dragSort: function () {
                    return columnGrids;
                },
                dragSortInterval: 0,
                dragContainer: document.body,
                dragReleaseDuration: 400,
                dragReleaseEasing: 'ease'
            })
            .on('dragStart', function (item) {
                // Let's set fixed widht/height to the dragged item
                // so that it does not stretch unwillingly when
                // it's appended to the document body for the
                // duration of the drag.
                item.getElement().style.width = item.getWidth() + 'px';
                item.getElement().style.height = item.getHeight() + 'px';
            })
            .on('dragReleaseEnd', function (item) {
                // Let's remove the fixed width/height from the
                // dragged item now that it is back in a grid
                // column and can freely adjust to it's
                // surroundings.
                item.getElement().style.width = '';
                item.getElement().style.height = '';
                // Just in case, let's refresh the dimensions of all items
                // in case dragging the item caused some other items to
                // be different size.
                columnGrids.forEach(function (grid) {
                    grid.refreshItems();
                });
                saveOrderedItems();
            })
            .on('layoutStart', function () {
                // Let's keep the board grid up to date with the
                // dimensions changes of column grids.
                boardGrid.refreshItems().layout();
            });

            // Add the column grid reference to the column grids
            // array, so we can access it later on.
            columnGrids.push(grid);

        });

        // Instantiate the board grid so we can drag those
        // columns around.
        boardGrid = new Muuri('.board', {
            layoutDuration: 400,
            layoutEasing: 'ease',
            dragEnabled: false,
            dragSortInterval: 0,
            dragStartPredicate: {
                handle: '.board-column-header'
            },
            dragReleaseDuration: 400,
            dragReleaseEasing: 'ease'
        });
    </script>
</body>
</html>